name: Auto Release

on:
  push:
    branches: [ main ]
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.version-check.outputs.should-release }}
      new-version: ${{ steps.version-check.outputs.new-version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if version changed
      id: version-check
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Check if tag already exists
        if git tag --list | grep -q "^v$CURRENT_VERSION$"; then
          echo "should-release=false" >> $GITHUB_OUTPUT
          echo "Tag v$CURRENT_VERSION already exists"
        else
          echo "should-release=true" >> $GITHUB_OUTPUT
          echo "new-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "New version detected: $CURRENT_VERSION"
        fi

  auto-release:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-release == 'true'
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm run test:run
    
    - name: Build project
      run: npm run build
    
    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ needs.check-version.outputs.new-version }}" -m "Release v${{ needs.check-version.outputs.new-version }}"
        git push origin "v${{ needs.check-version.outputs.new-version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}